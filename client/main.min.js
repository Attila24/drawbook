(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var _drawbook = require('./app/common/drawbook.common');var _drawbook2 = _interopRequireDefault(_drawbook);
var _drawbook3 = require('./app/user/drawbook.user');var _drawbook4 = _interopRequireDefault(_drawbook3);

var _DrawController = require('./app/draw/DrawController');var _DrawController2 = _interopRequireDefault(_DrawController);
var _UserService = require('./app/services/UserService');var _UserService2 = _interopRequireDefault(_UserService);
var _ImageService = require('./app/services/ImageService');var _ImageService2 = _interopRequireDefault(_ImageService);
var _CommentService = require('./app/services/CommentService');var _CommentService2 = _interopRequireDefault(_CommentService);
var _LikeService = require('./app/services/LikeService');var _LikeService2 = _interopRequireDefault(_LikeService);
var _blur = require('./app/directives/blur');var _blur2 = _interopRequireDefault(_blur);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

angular.
module('drawbook', [
'ngAnimate',
'ui.router',
'mgcrea.ngStrap',
'satellizer',
'LocalStorageModule',
'ngFileUpload',
'bsLoadingOverlay',
'bsLoadingOverlayHttpInterceptor',
_drawbook2.default.name,
_drawbook4.default.name]).

constant('server', { url: 'http://localhost:5000/api/' }).
controller('DrawController', _DrawController2.default)

// Services, factories
.factory('UserService', _UserService2.default).
factory('ImageService', _ImageService2.default).
factory('CommentService', _CommentService2.default).
factory('LikeService', _LikeService2.default)

// Directives
.directive('blur', _blur2.default)

// Routes config
.config(['$stateProvider', '$urlRouterProvider', '$locationProvider', function ($stateProvider, $urlRouterProvider, $locationProvider) {
    $locationProvider.html5Mode(true);
    $stateProvider.
    state('draw', {
        url: '/draw',
        templateUrl: '/app/draw/draw.tpl.html',
        controller: _DrawController2.default,
        controllerAs: 'vm' });

    $urlRouterProvider.otherwise("/");
}])

// Auth config
.config(['$authProvider', 'server', function ($authProvider, server) {
    $authProvider.baseUrl = server.url;
    $authProvider.signupUrl = '/users/register';
    $authProvider.loginUrl = '/users/login';
}]).

factory('allHttpInterceptor', ["bsLoadingOverlayHttpInterceptorFactoryFactory", function (bsLoadingOverlayHttpInterceptorFactoryFactory) {return bsLoadingOverlayHttpInterceptorFactoryFactory();}]).
config(['$httpProvider', function ($httpProvider) {
    $httpProvider.interceptors.push('allHttpInterceptor');
}]).

run(["bsLoadingOverlayService", function (bsLoadingOverlayService) {
    bsLoadingOverlayService.setGlobalConfig({
        delay: 500,
        activeClass: undefined,
        templateUrl: 'loading-overlay-template.html',
        templateOptions: undefined });

}]);

},{"./app/common/drawbook.common":6,"./app/directives/blur":7,"./app/draw/DrawController":8,"./app/services/CommentService":9,"./app/services/ImageService":10,"./app/services/LikeService":11,"./app/services/UserService":12,"./app/user/drawbook.user":16}],2:[function(require,module,exports){
'use strict';Object.defineProperty(exports, "__esModule", { value: true });exports.default =




HomeController;HomeController.$inject = ['$auth', 'localStorageService', 'UserService']; /* @ngInject */function HomeController($auth, localStorageService, UserService) {
    var vm = this;
    vm.title = 'HomeController';
    vm.user = localStorageService.get("currentUser");

    vm.isAuthenticated = isAuthenticated;
    vm.logout = logout;

    if (isAuthenticated()) init();

    ////////////////////////////////////////////

    function init() {
        UserService.get().
        then(function (res) {
            vm.users = res;
        });
    }

    function isAuthenticated() {
        return $auth.isAuthenticated();
    }

    function logout() {
        $auth.logout();
        localStorageService.remove("currentUser");
    }
}

},{}],3:[function(require,module,exports){
'use strict';Object.defineProperty(exports, "__esModule", { value: true });exports.default =




LoginController;LoginController.$inject = ['$state', '$auth', 'localStorageService']; /* @ngInject */function LoginController($state, $auth, localStorageService) {
    var vm = this;

    vm.title = 'LoginController';
    vm.incorrectLogin = false;

    vm.login = login;

    //////////////////////////////////////

    function login() {

        var user = {
            username: vm.user.name,
            password: vm.user.password };


        $auth.login(user).
        then(function (res) {
            localStorageService.set("currentUser", res.data.user);
            $state.go('home');
        }).
        catch(function (res) {
            console.log('Error: ' + res);
            vm.incorrectLogin = true;
        });
    }
}

},{}],4:[function(require,module,exports){
'use strict';Object.defineProperty(exports, "__esModule", { value: true });exports.default =




ProfileEditController;ProfileEditController.$inject = ['$state', 'localStorageService', 'UserService', 'Upload', 'server']; /* @ngInject */function ProfileEditController($state, localStorageService, UserService, Upload, server) {
    var vm = this;
    vm.title = 'ProfileEditController';
    vm.genders = ['Male', 'Female'];

    vm.edit = edit;
    vm.upload = upload;

    var username = localStorageService.get('currentUser').username;

    init();

    ////////////////////////////////////////////

    function init() {
        UserService.get(username).
        then(function (res) {
            vm.user = res.user;
            vm.avatarPath = vm.user.avatarPath || 'img/default-avatar.jpg';
        }).
        catch(function (res) {});
    }

    function edit() {
        UserService.update(vm.user);
        upload();
        $state.go('home');
    }

    function upload() {
        var file = vm.file;

        if (file) {

            file.upload = Upload.upload({
                url: server.url + '/users/' + vm.user.username + '/images/avatar',
                data: { file: file } });


            file.upload.then(function (res) {
                file.result = res;
            }, function (res) {
                if (res.status > 0) {
                    vm.errorMsg = res.status + ': ' + res.data;
                }
            });
        }
    }
}

},{}],5:[function(require,module,exports){
'use strict';Object.defineProperty(exports, "__esModule", { value: true });exports.default =




RegisterController;RegisterController.$inject = ['$state', '$auth', 'UserService', 'localStorageService']; /* @ngInject */function RegisterController($state, $auth, UserService, localStorageService) {
    var vm = this;

    vm.title = 'RegisterController';
    vm.genders = ['Male', 'Female'];
    vm.takenUsername = false;

    vm.checkUsername = checkUsername;
    vm.register = register;

    ////////////////////////////////////////////

    function checkUsername() {
        UserService.get(vm.user.username).
        then(function (res) {
            vm.takenUsername = res.user != null;
        }).
        catch(function (res) {});
    }

    function register() {
        var user = {
            username: vm.user.username,
            password: vm.user.password,
            firstName: vm.user.firstName,
            lastName: vm.user.lastName,
            age: vm.user.age,
            gender: vm.user.gender };

        $auth.signup(user).
        then(function (res) {
            localStorageService.set("currentUser", res.data.user);
            $auth.login(user).
            then(function (res) {
                $state.go('home');
            }).
            catch(function (res) {});
        }).
        catch(function (res) {});
    }

}

},{}],6:[function(require,module,exports){
'use strict';Object.defineProperty(exports, "__esModule", { value: true });

var _HomeController = require('./controller/HomeController');var _HomeController2 = _interopRequireDefault(_HomeController);
var _LoginController = require('./controller/LoginController');var _LoginController2 = _interopRequireDefault(_LoginController);
var _RegisterController = require('./controller/RegisterController');var _RegisterController2 = _interopRequireDefault(_RegisterController);
var _ProfileEditController = require('./controller/ProfileEditController');var _ProfileEditController2 = _interopRequireDefault(_ProfileEditController);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}exports.default =

angular.module('drawbook.common', []).
controller(_HomeController2.default).
controller(_LoginController2.default).
controller(_RegisterController2.default).
controller(_ProfileEditController2.default).
config(['$stateProvider', function ($stateProvider) {
    $stateProvider.state('home', {
        url: '/',
        templateUrl: '/app/common/tpl/home.tpl.html',
        controller: _HomeController2.default,
        controllerAs: 'vm' }).

    state('register', {
        url: '/register',
        templateUrl: '/app/common/tpl/register.tpl.html',
        controller: _RegisterController2.default,
        controllerAs: 'vm' }).

    state('login', {
        url: '/login',
        templateUrl: '/app/common/tpl/login.tpl.html',
        controller: _LoginController2.default,
        controllerAs: 'vm' }).

    state('edit', {
        url: '/edit',
        templateUrl: '/app/common/tpl/profile-edit.tpl.html',
        controller: _ProfileEditController2.default,
        controllerAs: 'vm' });

}]);

},{"./controller/HomeController":2,"./controller/LoginController":3,"./controller/ProfileEditController":4,"./controller/RegisterController":5}],7:[function(require,module,exports){
'use strict';Object.defineProperty(exports, "__esModule", { value: true });exports.default = blur;function blur() {
    return {
        restrict: 'A',
        link: function link(scope, element) {
            element.on('click', function () {element.blur();});
        } };

}

},{}],8:[function(require,module,exports){
'use strict';Object.defineProperty(exports, "__esModule", { value: true });exports.default =




DrawController;DrawController.$inject = ['$state', 'localStorageService', 'ImageService']; /* @ngInject */function DrawController($state, localStorageService, ImageService) {
    var vm = this;
    vm.title = 'DrawController';

    vm.saveImage = saveImage;

    ///////////////////////////////

    function saveImage() {

        var tmpcanvas = $('<canvas>').attr({ width: 600, height: 600 });
        var tmpcontext = tmpcanvas[0].getContext('2d');
        var arr = [];

        $('.canvas').each(function () {
            arr.push({
                canvas: $(this),
                zindex: parseInt($(this).css("z-index")) });

        });

        arr.sort(function (a, b) {return a.zindex - b.zindex;});

        for (var i = 0; i < arr.length; i++) {
            tmpcontext.drawImage(arr[i]['canvas'][0], 0, 0);
        }

        var img = tmpcanvas[0].toDataURL();
        var username = localStorageService.get("currentUser").username;

        ImageService.post(username, img, vm.imagetitle || 'Untitled').
        then(function (res) {
            $state.go('home');
        }).
        catch(function (res) {});
    }

}

},{}],9:[function(require,module,exports){
'use strict';Object.defineProperty(exports, "__esModule", { value: true });exports.default =




CommentService;CommentService.$inject = ['$q', '$http', 'server']; /* @ngInject */function CommentService($q, $http, server) {
    return {
        post: function post(username, imageid, comment, currentUser) {return $http.post(server.url + '/users/' + username + '/images/' + imageid + '/comments/', {
                author: currentUser.username,
                authorAvatar: currentUser.avatarPath,
                comment: comment }).
            then(function (res) {return res.data;});},
        get: function get(user, imageid) {return $http.get(server.url + '/users/' + user.username + '/images/' + imageid).then(function (res) {return res;});},
        delete: function _delete(user, imageid, commentid) {return $http.delete(server.url + '/users/' + user.username + '/images/' + imageid + '/comments/' + commentid).then(function (res) {return res;});} };

}

},{}],10:[function(require,module,exports){
'use strict';Object.defineProperty(exports, "__esModule", { value: true });exports.default =




ImageService;ImageService.$inject = ['$http', 'server']; /* @ngInject */function ImageService($http, server) {
    return {
        get: function get(username, id) {return $http({
                method: 'GET',
                url: server.url + 'users/' + username + '/images/' + id,
                headers: { 'Content-Type': 'images/png' } }).
            then(function (res) {return { data: res, id: id };});},

        post: function post(username, img, title) {return $http.post(server.url + 'users/' + username + '/images/', {
                "title": title,
                "image": img }).
            then(function (res) {return res.data;});},

        delete: function _delete(id, username) {return $http.delete(server.url + 'users/' + username + '/images/' + id).then(function (res) {return res.data;});} };

}

},{}],11:[function(require,module,exports){
'use strict';Object.defineProperty(exports, "__esModule", { value: true });exports.default =




LikeService;LikeService.$inject = ['$q', '$http', 'server']; /* @ngInject */function LikeService($q, $http, server) {
    return {
        post: function post(username, id, author) {return $http.post(server.url + '/users/' + username + '/images/' + id + '/likes/', { author: author }).then(function (res) {return res;});},
        get: function get(username, id) {return $http.get(server.url + '/users/' + username + '/images/' + id + '/likes/').then(function (res) {return res;});},
        delete: function _delete(username, id, author) {return $http.delete(server.url + '/users/' + username + '/images/' + id + '/likes/' + author).then(function (res) {return res;});} };

}

},{}],12:[function(require,module,exports){
'use strict';Object.defineProperty(exports, "__esModule", { value: true });exports.default =




UserService;UserService.$inject = ['$http', 'server']; /* @ngInject */function UserService($http, server) {
    return {
        get: function get(username) {
            var url = username ? server.url + 'users/' + username : server.url + 'users/';
            return $http.get(url).then(function (res) {return res.data;});
        },
        update: function update(user) {return $http.patch(server.url + 'users/' + user.username, { user: user }).
            then(function (res) {return res.data;});} };

}

},{}],13:[function(require,module,exports){
'use strict';Object.defineProperty(exports, "__esModule", { value: true });exports.default =




UserController;UserController.$inject = ['$stateParams', 'UserService', 'ImageService', 'user']; /* @ngInject */function UserController($stateParams, UserService, ImageService, user) {
    var vm = this;
    vm.title = 'UserController';
    vm.images = [];
    vm.user = user.user;

    ////////////////

    /*function deleteImage(_id, index) {
        ImageService.delete(_id, vm.user.username)
            .then(function (res){
                delete vm.user.images[index];
            })
            .catch(function (res){});
    }*/
}

},{}],14:[function(require,module,exports){
'use strict';Object.defineProperty(exports, "__esModule", { value: true });exports.default =




UserGalleryController;UserGalleryController.$inject = ['user', 'ImageService', 'localStorageService']; /* @ngInject */function UserGalleryController(user, ImageService, localStorageService) {
    var vm = this;
    vm.title = 'UserGalleryController';
    vm.user = user.user;
    vm.images = [];

    var limit = 12;

    vm.loadMore = loadMore;
    vm.deleteImage = deleteImage;

    init();

    ////////////////////

    function init() {
        vm.currentUser = localStorageService.get('currentUser');

        vm.loaded = vm.user.images.length < limit ? vm.user.images.length : limit;
        for (var i = 0; i < vm.loaded; i++) {
            ImageService.get(vm.user.username, vm.user.images[i]._id).
            then(function (res) {
                vm.images.push(res.data.data);
            }).
            catch(function (res) {});
        }
    }

    function loadMore() {
        vm.current = vm.loaded;
        vm.loaded = vm.user.images.length < vm.loaded + limit ? vm.user.images.length : vm.loaded + limit;

        for (var i = vm.current; i < vm.loaded; i++) {
            ImageService.get(vm.user.username, vm.user.images[i]._id).
            then(function (res) {
                vm.images.push(res.data.data);
            }).
            catch(function (res) {});
        }
    }

    function deleteImage(id, index) {
        console.log('images:' + vm.images);
        console.log(index);
        ImageService.delete(id, vm.user.username).
        then(function (res) {vm.images.splice(index, 1);}).
        catch(function (res) {});
    }
}

},{}],15:[function(require,module,exports){
'use strict';Object.defineProperty(exports, "__esModule", { value: true });exports.default =




UserImageController;UserImageController.$inject = ['$stateParams', 'ImageService', 'user', '$state', '$scope', 'CommentService', 'localStorageService', 'LikeService']; /* @ngInject */function UserImageController($stateParams, ImageService, user, $state, $scope, CommentService, localStorageService, LikeService) {

    var vm = this;
    vm.title = 'UserImageController';
    vm.user = user.user;
    vm.index = $stateParams.index;
    vm.navigate = navigate;
    vm.addComment = addComment;
    vm.deleteComment = deleteComment;
    vm.addLike = addLike;
    vm.removeLike = removeLike;
    vm.isLiked = isLiked;

    vm.likes = [];

    init();

    ////////////////////////////////////

    function init() {

        vm.currentUser = localStorageService.get('currentUser');

        $(window).on('click', function (event) {
            if ($(event.target).is('.modal')) {
                $state.go('user.gallery', { user: vm.username }).
                then(function () {
                    $scope.$hide();
                });
            }
        });

        if (vm.index === undefined || vm.index === null) {
            vm.index = vm.user.images.map(function (e) {return e._id;}).indexOf($stateParams.id);
        }

        if (vm.user.images.length == 1) {
            vm.prev = vm.next = undefined;
        } else if (vm.index == 0) {
            vm.next = vm.user.images[vm.index + 1]._id;
            vm.prev = undefined;
        } else if (vm.index > 0 && vm.index < vm.user.images.length - 1) {
            vm.prev = vm.user.images[vm.index - 1]._id;
            vm.next = vm.user.images[vm.index + 1]._id;
        } else if (vm.index == vm.user.images.length - 1) {
            vm.prev = vm.user.images[vm.index - 1]._id;
            vm.next = undefined;
        }

        ImageService.get(vm.user.username, $stateParams.id).
        then(function (res) {
            vm.image = res.data.data;
            vm.comments = vm.image.image.comments;
        }).
        catch(function (res) {});
        loadLikes();
    }

    function loadComments() {
        CommentService.get(vm.user.username, $stateParams.id).
        then(function (res) {
            vm.comments = res.image.comments;
        }).
        catch(function (res) {});
    }

    function loadLikes() {
        LikeService.get(vm.user.username, $stateParams.id).
        then(function (res) {
            vm.likes = res.likes;
        }).
        catch(function (res) {});
    }

    function navigate(keyCode) {
        if (vm.prev != undefined && keyCode == 37) {// left
            $state.go('user.gallery.image', { id: vm.prev, index: vm.index - 1 }).
            then(function () {
                $scope.$hide();
            });
        } else if (vm.next != undefined && keyCode == 39) {// right
            $state.go('user.gallery.image', { id: vm.next, index: vm.index + 1 }).
            then(function () {
                $scope.$hide();
            });
        } else if (keyCode == 27) {// escape
            $state.go('user.gallery', { user: vm.username }).
            then(function () {
                $scope.$hide();
            });
        }
    }


    function addComment() {
        CommentService.post(vm.user.username, $stateParams.id, vm.comment, vm.currentUser).
        then(function (res) {
            vm.comment = "";
            loadComments();
        }).
        catch(function (res) {});
    }

    function deleteComment(commentid) {
        CommentService.delete(vm.user.username, $stateParams.id, commentid).
        then(function (res) {
            loadComments();
        }).
        catch(function (res) {});
    }

    function addLike() {
        LikeService.post(vm.user.username, $stateParams.id, vm.currentUser.username).
        then(function (res) {
            vm.likes.push(vm.currentUser.username);
        }).
        catch(function (res) {});
    }

    function removeLike() {
        LikeService.delete(vm.user.username, $stateParams.id, vm.currentUser.username).
        then(function (res) {
            vm.likes.splice(vm.likes.indexOf(vm.currentUser.username), 1);
        }).
        catch(function (res) {});
    }

    function isLiked() {
        return vm.likes.find(function (x) {return x == vm.currentUser.username;}) != undefined;
    }
}

},{}],16:[function(require,module,exports){
'use strict';Object.defineProperty(exports, "__esModule", { value: true });

var _UserController = require('./controller/UserController');var _UserController2 = _interopRequireDefault(_UserController);
var _UserGalleryController = require('./controller/UserGalleryController');var _UserGalleryController2 = _interopRequireDefault(_UserGalleryController);
var _UserImageController = require('./controller/UserImageController');var _UserImageController2 = _interopRequireDefault(_UserImageController);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}exports.default =

angular.module('drawbook.user', [])

// Controllers
.controller(_UserController2.default).
controller(_UserGalleryController2.default).
controller(_UserImageController2.default)
// States config
.config(['$stateProvider', function ($stateProvider) {
    $stateProvider.
    state('user', {
        abstract: true,
        url: '/:username',
        templateUrl: '/app/user/tpl/user.tpl.html',
        controller: _UserController2.default,
        controllerAs: 'vm',
        resolve: {
            user: ['$stateParams', 'UserService', function ($stateParams, UserService) {return UserService.get($stateParams.username);}] } }).



    state('user.gallery', {
        url: '/',
        templateUrl: '/app/user/tpl/user.gallery.tpl.html',
        controller: _UserGalleryController2.default,
        controllerAs: 'vm' }).

    state('user.gallery.image', {
        url: 'image/:id',
        params: { index: null },
        onEnter: ['$modal', '$state', 'user', '$stateParams', function ($modal, $state, _user) {
            $modal({
                templateUrl: '/app/user/tpl/user.image.tpl.html',
                controller: _UserImageController2.default,
                controllerAs: 'vm',
                resolve: {
                    user: function user() {return _user;} },

                container: 'body',
                animation: 'am-fade',
                backdropAnimation: 'backdrop-anim',
                position: 'center',
                keyboard: false,
                backdrop: false });

        }] });

}]);

},{"./controller/UserController":13,"./controller/UserGalleryController":14,"./controller/UserImageController":15}]},{},[1])


//# sourceMappingURL=main.min.js.map
